LABEL Author="tonykew@buffalo.edu"

##############################################################################
# set VNHPC Docker version here
##############################################################################
ARG nvhpc_version=24.7
##############################################################################

FROM nvcr.io/nvidia/nvhpc:${nvhpc_version}-devel-cuda_multi-ubuntu24.04
# Make the nvhpc_version vvariable avaiable after the "FROM"
ARG nvhpc_version

##############################################################################
# set all other versions here
##############################################################################
#
# Set the CUDA variables based on the version you want to use in the
# NVHPC container e.g.
#
#      module --force purge && module load nvhpc-hpcx-cuda12/24.7
#      ls ${NVHPC_ROOT}/cuda
#
#ARG cuda_version=11.8
#ARG cuda_major_version=11
ARG cuda_version=12.5
ARG cuda_major_version=12
#
ARG vasp_version=6.4.3
ARG fftw_version=3.3.10
ARG parallel_build_tasks=32
ARG hdf5_version_dotted=1.14.4.3
ARG hdf5_version_dashed=1.14.4-3
##############################################################################

LABEL vasp_version="${vasp_version}"
LABEL fftw_version="${fftw_version}"
LABEL hdf5_version="${hdf5_version_dashed}"
LABEL nvhpc_version="${nvhpc_version}"

# change the default shell to be bash rather than sh so any bash
# specific commands don't die in unexpected ways...
### NOT suppored by podman!
###SHELL ["/bin/bash", "-c"]

# set the WORKDIR to the top of our build tree
WORKDIR /build

# Be sure we can ssh between instances of the container for MPI
# (don't know if we need this - suspect we do)
EXPOSE 22/tcp

USER root
COPY vasp.${vasp_version}.tgz .
ADD fix_nvhpc_.pc_files.bash .
ADD https://www.fftw.org/fftw-${fftw_version}.tar.gz .
ADD https://github.com/HDFGroup/hdf5/releases/download/hdf5_${hdf5_version_dotted}/hdf5-${hdf5_version_dashed}.tar.gz .

##############################################################################
####
#### podman build does not currently support:
####   --device nvidia.com/gpu=[...] 
####
#### and using the old syntax:
####
####   --device /dev/nvidia0:/dev/nvidia0:rw
####
#### ...is not working for me, so no GPUs avilable during the build process
#### hence running "make check" or "make test" on any code that uses GPUs
#### doesn't make sense
####
##############################################################################
#### Make sure we have access to some GPUs - needed for tests
###RUN bash -l -c 'module --force purge ||:; \
### module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
### if [ "$(nvidia-smi -L 2\>/dev/null)" = "" ]; \
### then \
###   echo >&2; \
###   echo >&2; \
###   echo "No GPUs found" >&2; \
###   echo "Add \"--device nvidia.com/gpu=all\" to the podman build command" >&2; \
###   echo >&2; \
###   echo >&2; \
###   exit 1; \
### else \
###   echo "GPUs detected:"; \
###   nvidia-smi -L; \
### fi'
##############################################################################

# upgrade everything in the O/S & install less, lddtree and ip
USER root
RUN echo "--------------------------------------------------------------------------------" && \
 echo " upgrade everything in the O/S then install less and lddtree" && \
 echo "--------------------------------------------------------------------------------" && \
 apt-get update && apt-get -y upgrade && apt-get -y install less pax-utils iproute2

##############################################################################
# Fix the broken prefix paths in the pkgconfig .pc files
##############################################################################
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Fix the prefix paths in the pkgconf .pc files" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 /build/fix_nvhpc_.pc_files.bash'

#
# Build HDF5
#
#
# NOTE: To build with GCC
#
#  CC=gcc CXX=g++ FC=gfortran F77=gfortran F90=gfortran ./configure [...]
#
# ...BUT the Fortran .mod files generated by gcc are NOT compatible with nvidia
#
# To build with nvc:
#
#   CFLAGS="-O0 --diag_suppress code_is_unreachable" ./configure [...]
#
# ...however, with the nvidia copmilers "make check" fails with:
# 
# Testing hard signed char -> long double conversions                   make[4]: *** [Makefile:3997: dt_arith.chkexe_] Error 1
#
# ...so test errors are ignored below with "make check -i" - this is super
# sub-optimal!
#
#
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build HDF5" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 apt-get -y install zlib1g-dev libsz2 libmysqlclient-dev libpam-dev && \
 chmod 1777 /build && \
 gzip -dc "hdf5-${hdf5_version_dashed}.tar.gz" | su ubuntu bash -c "tar xf -" && \
 rm "hdf5-${hdf5_version_dashed}.tar.gz"'
#
# Build an install serial HDF5 C++ support first (no parallel support ?yet?)
#
# Run "make" and "make check" as the local user "ubuntu"
USER ubuntu
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build Serial HDF5 C++ support" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 echo "hdf5-${hdf5_version_dashed}" && \
 cd "/build/hdf5-${hdf5_version_dashed}" && \
 sed -i "/as_ln_s=.ln -s./s/-s/-sf/" configure && \
 sed -E -i "/^[[:space:]]*PROD_CFLAGS=/s/\"\"/\"--diag_suppress code_is_unreachable\"/" config/nvidia-flags && \
 echo "Making serial c++ library first (no parallel support)" && \
 ./configure --enable-optimization=none --disable-silent-rules \
  --enable-build-mode=production  --prefix=/usr --enable-cxx \
  --enable-tests && \
 make -j ${parallel_build_tasks} && \
 echo "unset SLURM variables for testing prior to testing" && \
 while read var; do  unset ${var}; done <<< \
  $(bash -c "set | grep ^SLURM | awk -F= \"{print \\\$1}\"") && \
 echo make check -i'
#
# Run "make install" as root
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Install Serial HDF5 C++ suport" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 echo "hdf5-${hdf5_version_dashed}" && \
 cd "/build/hdf5-${hdf5_version_dashed}" && \
 make install'
#
# Building Parallel HDF5
#
USER ubuntu
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build Parallel HDF5" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 echo "hdf5-${hdf5_version_dashed}" && \
 cd "/build/hdf5-${hdf5_version_dashed}" && \
 make distclean && \
 MPICC=$(which mpicc) MPICXX=$(which mpic++) MPIFC=$(which mpifort) \
  MPIF77=$(which mpif77) MPIF90=$(which mpif90) \
  CC=$(which mpicc) CXX=$(which mpic++) FC=$(which mpifort) \
  F77=$(which mpif77) F90=$(which mpif90) \
  ./configure --enable-optimization=none --disable-silent-rules \
  --enable-build-mode=production  --prefix=/usr --enable-parallel \
  --enable-subfiling-vfd --enable-direct-vfd --enable-mirror-vfd \
  --enable-parallel-tools --enable-hl --enable-tests --enable-fortran && \
 echo "NOTE: --enable-cxx cannot be used with --enable-parallel" \
 make -j ${parallel_build_tasks} && \
 while read var; do  unset ${var}; done <<< \
  $(bash -c "set | grep ^SLURM | awk -F= \"{print \\\$1}\"") && \
 echo make check -i'

# TODO:
#
# figure out the dependencies missing to add:
#
#  --enable-ros3-vfd \
#

# Run "make install" as root
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Install HDF5" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 cd "/build/hdf5-${hdf5_version_dashed}" && \
 MPICC=$(which mpicc) MPICXX=$(which mpic++) MPIFC=$(which mpifort) \
  MPIF77=$(which mpif77) MPIF90=$(which mpif90) \
  CC=$(which mpicc) CXX=$(which mpic++) FC=$(which mpifort) \
  F77=$(which mpif77) F90=$(which mpif90) \
 make install'


#
# Build FFTW with threads, OpenMP and MPI support
#
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build FFTW" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 gzip -dc "fftw-${fftw_version}.tar.gz" | su ubuntu bash -c "tar xf -" && \
 rm "fftw-${fftw_version}.tar.gz"'
# Run "make" and "make check" as the local user "ubuntu"
USER ubuntu
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build FFTW" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 cd "/build/fftw-${fftw_version}" && \
 export MPICC=$(which mpicc) && \
 export MPICXX=$(which mpic++) && \
 export MPIFC=$(which mpifort) && \
 export MPIF77=$(which mpif77) && \
 export MPIF90=$(which mpif90) && \
 ./configure --prefix=/usr --enable-mpi --enable-threads --enable-openmp && \
 make -j ${parallel_build_tasks} && \
 echo make check'

# Run "make install" as root
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build FFTW" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 cd "/build/fftw-${fftw_version}" && \
 make install'


#
# Build VASP
#
USER root
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build VASP" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 apt-get -y install rsync && \
 gzip -dc "vasp.${vasp_version}.tgz" | su ubuntu bash -c "tar xf -" && \
 rm "vasp.${vasp_version}.tgz"'
# Run "make" and "make test" as the local user "ubuntu"
USER ubuntu
RUN bash -l -c 'echo "--------------------------------------------------------------------------------" && \
 echo " Build VASP" && \
 echo "--------------------------------------------------------------------------------" && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 cd "/build/vasp.${vasp_version}" && \
 cp arch/makefile.include.nvhpc_omp_acc ./makefile.include && \
 sed -E -i.old "/^#(HDF5|[^[:space:]]+.*HDF5)/s|^#||" ./makefile.include && \
 sed -E -i "/^(CC|FC|FCL)[[:space:]]/s|-gpu=[^[:space:]]*|-gpu=ccall,cuda${cuda_version}|" makefile.include && \
 make DEPS=1 FFTW_ROOT=/usr HDF5_ROOT=/usr -j ${parallel_build_tasks} && \
 echo make test'

#
# Fix the RPATH of vasp_std, vasp_ncl and vasp_gam so they can be run
# without setting an LD_LIBRARAY_PATH
#
# Disble HCOLL container wide for all the MPI versions that support it
#
# ...then install in /usr/bin
USER root
RUN bash -l -c 'apt-get -y install patchelf && \
 module --force purge ||:; \
 module load nvhpc-hpcx-cuda${cuda_major_version}/${nvhpc_version} && \
 cd "/build/vasp.${vasp_version}/bin" && \
 patchelf --add-rpath "$(bash -l -c "echo \"\${NVHPC_ROOT}\"")/compilers/extras/qd/lib" ./vasp_std && \
 patchelf --add-rpath "$(bash -l -c "echo \"\${NVHPC_ROOT}\"")/compilers/extras/qd/lib" ./vasp_ncl && \
 patchelf --add-rpath "$(bash -l -c "echo \"\${NVHPC_ROOT}\"")/compilers/extras/qd/lib" ./vasp_gam && \
 find $(find /opt/nvidia/hpc_sdk/ -type f -executable -name ompi_info | while read bin; \
 do ${bin} --param all all --level 9 2>&1 | grep -q coll_hcoll_enable && echo "${bin}"; \
 done | sed "s|/bin/.*||") -name openmpi-mca-params.conf | while read file; \
 do if ! grep -E -q ^[[:space:]]*coll_hcoll_enable[[:space:]]*=[[:space:]]*0 "${file}"; \
   then echo >> "${file}"; \
   echo "# Disable HCOLL" >> "${file}"; \
   echo "coll_hcoll_enable = 0" >> "${file}"; \
   echo >> "${file}"; \
   fi; \
 done && \
 cp /build/vasp.${vasp_version}/bin/* /usr/bin'

# run in the container as the user "ubuntu" by default
USER ubuntu

